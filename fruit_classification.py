# -*- coding: utf-8 -*-
"""Fruit_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qgMpcbozqoczHDYOZl6RZpsXF-i15fVS
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import files
files.upload()

# ! pip install opendatasets

import opendatasets as od

dataset_url = 'https://www.kaggle.com/moltean/fruits'
od.download(dataset_url)

import os 
import cv2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, BatchNormalization, Dropout, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.optimizers import Adam
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

data_dir = '/content/fruits/fruits-360_dataset/fruits-360/Training'

file_names=os.listdir(data_dir)
pd.DataFrame(file_names,columns=['Names'])

# size_number=[]
# size=[]
# for file in file_names:
#     path=os.path.join(data_dir,file)
#     size_number.append(len(os.listdir(path)))
#     for img in os.listdir(path):
#         image=cv2.imread(os.path.join(path,img))
#         size.append(image.shape)
# pd.DataFrame(size_number,columns=['size'],index=file_names)

train_image=[]
label=[]
for file in file_names:
    path=os.path.join(data_dir,file)
    for img in os.listdir(path):
        image=cv2.imread(os.path.join(path,img))
        train_image.append(image)
        label.append(file)
pd.DataFrame(label,columns=['label'])

train_image=np.array(train_image)
label=np.array(label)

label_encoding={}
label_uniqe=list(pd.unique(label))
for i in range(131):
    label_encoding[label_uniqe[i]]=i
label_encoding

def get_Name(N):
    for x,y in label_encoding.items():
          if y==N:
                return x
label2=[]
for i in label:
    label2.append(label_encoding[i])
label2=np.array(label2)
pd.DataFrame(label2)

X_train, X_test, y_train, y_test = train_test_split(train_image, label2, test_size=0.1, random_state=44, shuffle =True)
print('X_train shape is ' , X_train.shape)
print('X_test shape is ' , X_test.shape)
print('y_train shape is ' , y_train.shape)
print('y_test shape is ' , y_test.shape)

plt.figure(figsize=(8,8))
for i in range(25):
    plt.subplot(5, 5, i+1, xticks=[], yticks=[])
    plt.imshow(cv2.cvtColor(X_train[i], cv2.COLOR_BGR2RGB))
    plt.axis("off")
plt.show()

shape=(100,100,3)
num_class=len(file_names)
model=keras.models.Sequential()
model.add(keras.layers.Conv2D(filters=32, kernel_size=(3,3),activation=tf.nn.relu,input_shape=shape))
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.MaxPool2D((3,3))) 
model.add(keras.layers.Dropout(.3)) 
model.add(keras.layers.Conv2D(filters=64, kernel_size=(3,3),activation=tf.nn.relu)) 
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.MaxPool2D((3,3))) 
model.add(keras.layers.Dropout(.3)) 
model.add(keras.layers.Conv2D(filters=128, kernel_size=(3,3),activation=tf.nn.relu))
model.add(keras.layers.BatchNormalization())
model.add(keras.layers.MaxPool2D((3,3))) 
model.add(keras.layers.Dropout(.3)) 
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(512,activation=tf.nn.relu))
model.add(keras.layers.Dropout(.3)) 
model.add(keras.layers.Dense(128,activation=tf.nn.relu)) 
model.add(keras.layers.Dropout(.3)) 
model.add(keras.layers.Dense(num_class,activation=tf.nn.softmax))

model.summary()

model.compile(optimizer ='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
hist=model.fit(X_train, y_train, epochs=10)

# Saving the  model to use it later on

classifier_model = model.to_json()
with open("/gdrive/My Drive/unikaksha/mini_projects/Fruit_Classification/Fruit_Classification_Model.json", "w") as json_file:
    json_file.write(classifier_model)
model.save_weights("/gdrive/My Drive/unikaksha/mini_projects/Fruit_Classification/Fruit_Classification_Model.h5")

plt.plot(hist.history['accuracy'], 'green', label='Accuracy')
plt.plot(hist.history['loss'], 'red', label='Loss')
plt.title('Accuracy & Loss')
plt.xlabel('Epoch')
plt.legend(["Accuracy", "Loss"], loc ="upper right")
plt.figure()

score, acc = model.evaluate(X_test, y_test)
print('Test Loss =', score)
print('Test Accuracy =', acc)

y_pred = model.predict(X_test)

pred_Name=[]
pred_number=[]
for j in y_pred:
    N=np.argmax(j)
    pred_Name.append(get_Name(N))
    pred_number.append(N)
pd.DataFrame(pred_Name,columns=['pred Names'])

plt.figure(figsize=(15,15))
# n=1
for i in range(20):
    plt.subplot(5, 4, i+1, xticks=[], yticks=[])
    plt.imshow(cv2.cvtColor(X_test[i], cv2.COLOR_BGR2RGB))
    plt.axis('off')
    labels = get_Name(y_test[i])+', predict: '+ pred_Name[i]
    plt.title(labels,fontsize=8)
    # n+=1

ClassificationReport = classification_report(y_test, pred_number)
print('Classification Model Summary ', ClassificationReport )

